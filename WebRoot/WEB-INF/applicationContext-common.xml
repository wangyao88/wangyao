<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:tx="http://www.springframework.org/schema/tx"
      xmlns:aop="http://www.springframework.org/schema/aop"
      xsi:schemaLocation="http://www.springframework.org/schema/beans
                          http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                          http://www.springframework.org/schema/context
                          http://www.springframework.org/schema/context/spring-context-4.0.xsd
                          http://www.springframework.org/schema/aop
						  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
						  http://www.springframework.org/schema/tx
						  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!--加载资源文件其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
	<context:property-placeholder location="/WEB-INF/config.properties"/>
	<!--扫描包路径选项，使用annotation自动注册bean,并保证@Required,@Autowired的属性被注入，有了该配置,那么<context:annotation-config/>这个配置就可以省略（以下配置包含了<context:annotation-config/>配置）-->
	<!--  <context:component-scan base-package="com.sxkl"/>-->
	
	<!--数据源配置,使用应用内的DBCP数据库连接池-->
	<!--定义数据库连接池数据源bean destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用-->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean> -->
	
	<!-- 数据库连接池c3p0配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="maxPoolSize" value="40"></property>
		<property name="minPoolSize" value="1"></property>
		<property name="initialPoolSize" value="1"></property>
		<property name="maxIdleTime" value="20"></property>
	</bean>
	
	<!--Hibernate的注解配置-->
	<!--  <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
			 <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
			 <property name="dataSource" ref="dataSource"/>
		  </bean>
			如果hibernate使用了注解来做对象关系映射，则要使用这个类：
			org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean
	-->
	<bean id="sessionFactory"
	      class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
	      <property name="dataSource" ref="dataSource"/>
	      <property name="hibernateProperties">
		      <props>
		        <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
		        <prop key="hibernate.dialect">${hibernate.dialect}</prop>
		        <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
		        <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
		        <prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
		      </props>
	      </property>
	      <property name="packagesToScan">
	            <list>
	                <value>com.overdue.model</value>
	            </list>
		  </property>
	</bean>
	
	<!--注入hibernateTemplate模板-->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!--配置Hibernate事务管理器-->
	<bean id="transactionManager"
	      class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	      <property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!--配置事务异常封装-->
	      
	<!--声明式容器事务管理,transaction-manager指定事务管理器为transactionManager-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	   <tx:attributes>
		    <tx:method name="add*" propagation="REQUIRED"/>
		    <tx:method name="save*" propagation="REQUIRED"/>  
	        <tx:method name="delete*" propagation="REQUIRED" />  
	        <tx:method name="update*" propagation="REQUIRED"/>  
	        <tx:method name="init*" propagation="REQUIRED"/>
	        <tx:method name="get*" propagation="REQUIRED"/>
	        <tx:method name="*" read-only="true"/>
	   </tx:attributes>
	</tx:advice>
	
	<aop:config expose-proxy="true"><!--只对业务逻辑层实施事务-->
		<aop:pointcut id="txPointcut" expression="execution(* com.overdue.service.*.*(..))"/>
		<!--Advisor定义，切入点和通知分别为txPointcut、txAdvice-->
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
</beans>